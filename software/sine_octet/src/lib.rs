//! https://zipcpu.com/dsp/2017/08/26/quarterwave.html
#![no_std]

const SIN_QUARTER: [u8; 0x3f] = [
	0x80, 0x83, 0x86, 0x89, 0x8C, 0x90, 0x93, 0x96, 0x99, 0x9C, 0x9F, 0xA2, 0xA5, 0xA8, 0xAB, 0xAE,
	0xB1, 0xB3, 0xB6, 0xB9, 0xBC, 0xBF, 0xC1, 0xC4, 0xC7, 0xC9, 0xCC, 0xCE, 0xD1, 0xD3, 0xD5, 0xD8,
	0xDA, 0xDC, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEB, 0xED, 0xEF, 0xF0, 0xF1, 0xF3, 0xF4,
	0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFA, 0xFB, 0xFC, 0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF,
];

#[must_use]
pub const fn bsin(x: usize) -> u8 {
	match x as u8 {
		0..0x3f => SIN_QUARTER[x],
		0x3f..0x7f => SIN_QUARTER[0x80 - x],
		0x7f..0xbf => SIN_QUARTER[0x80 - x] - 0x80,
		0xbf..=0xff => SIN_QUARTER[0x80 - x] - 0x80,
	}
}

#[cfg(test)]
mod tests {
	use super::*;
	use core::f32::consts::PI;

	#[must_use]
	fn bsin_ref(x: usize) -> u8 {
		let x = x as u8 as f32;
		((((x + 1.0) / 128.0 * PI).sin() + 1.0) * 127.5) as _
	}

	#[test]
	fn verify_table() {
		assert_eq!(SIN_QUARTER, core::array::from_fn(bsin_ref));
	}

	#[test]
	fn consensus() {
		for n in 0..0x100 {
			assert_eq!(bsin(n), bsin_ref(n));
		}
	}
}
